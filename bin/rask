#!/usr/bin/env node

var fs = require('fs');

var program = require('commander');

program.option('--dev', 'turn on dev mode');

var cgen =
  program
    .command('gen <filename>')
    .description('Generate various source templates.');

cgen.action(function(filename) {
  var hasDev = (function() {
    if (program.dev && fs.existsSync(__dirname + '/assets/' + filename + '.dev')) {
      return '.dev';
    } else {
      return '';
    }
  })();
  fs.readFile(__dirname + '/assets/' + filename + hasDev, function(err, data) {
    if (err) {
      cgen.outputHelp();
      process.exit(0);
    } else {
      console.log(data.toString());
    }
  });
});

var ccopyStaticSample =
  program
    .command('copy-static-sample')
    .description('Copy static sample files into current dir.')
    .action(function() {
      var self = this;
      var restart = require('child_process').spawn('cp', ['-rv', __dirname + '/../example/static', './']);
      restart.stdout.on('data', function (data) {
        console.log(data.toString());
      });
      restart.stderr.on('data', function (data) {
        console.error(data.toString());
      });
      restart.on('close', function (code) {
        console.log('done with code: ' + code);
      });
    });

var result = program.parse(process.argv);

// Check whether we have at least one subcmd found.
//
// Sadly currently we have to do in this vague way: checking the result.args array
// for object. This method is got by observing console.log(result). Maybe there is
// better way out there.
var foundCmd = false;
for (var i=0; i<result.args.length; i++) {
  if (typeof result.args[i] === 'object') {
    foundCmd = true;
  }
}

if (!foundCmd || !result.args.length) {
  program.help();
}
